/* Generated by Together */

#include "stdafx.h"
#include "EPropWnd.h"
#include "IPropertyHost.h"
#include "EProperty.h"

EProperty::EProperty( IPropertyHost* pHost , const CString& sName , void* pProperty , bool bEnabled )
{
	m_pProperty   = pProperty;
	m_pHost       = pHost;
	m_sName       = sName;
	m_bSelected   = false;
	m_bEnabled    = bEnabled;
	m_nIndent     = 0;

	m_bNodeOpen    = false;
	m_bHasChildren = false;
}
EProperty::~EProperty()
{
//	TRACE("Destroying EProperty!\n");
}

bool EProperty::OnCommand( EPropWnd* pParent , WPARAM wParam , LPARAM lParam )
{
	return false;
}

bool EProperty::IsSelected()
{
	return m_bSelected;
}

int EProperty::GetPreferedWidth( CDC* pDC )
{
	return 50;
}

int EProperty::GetHeight()
{
	return 100;
}

int EProperty::GetHeight( CDC* pDC )
{
	return GetHeight();
}

bool EProperty::IsEnabled()
{
	bool bEnabled = m_bEnabled;

	if( m_bEnabled )		//if set to false, don't even ask host..
	{
		bEnabled = m_pHost->IsPropertyEnabled( m_pProperty );
	}

	return bEnabled;
}

void EProperty::Draw( CDC* pDC ,  EPropWnd* pCtrl , const CRect& r )
{
	if( m_bSelected )
	{
		pDC->FillSolidRect( &r , pCtrl->GetColorPaneValActive() );
	}
	else
	{
		pDC->FillSolidRect( &r , pCtrl->GetColorPaneVal() );
	}
}

void EProperty::OnPropActivate( EPropWnd* pParent )
{
}

bool EProperty::OnPropApply()
{
	return false;
}

void EProperty::OnPropClose()
{
}

bool EProperty::OnLButtonDown( EPropWnd* pParent , CPoint p )
{
	return false;
}

bool EProperty::OnSpaceKey()
{
	return false;
}


CString EProperty::GetName()
{
	return m_sName;
}

COLORREF EProperty::GetColorKey( EPropWnd* pCtrl )
{
	COLORREF nColor = pCtrl->GetColorPaneKey();

	if( IsSelected() )
	{
		nColor = pCtrl->GetColorPaneKeyActive();
	}

	return nColor;
}

bool EProperty::IsSelectable()
{
	return true;	//IsEnabled();
}

CString EProperty::GetSortValueString()
{
	return "";
}

bool EProperty::GetSortValueDouble( double& dValue )
{
	return false;
}

bool EProperty::GreaterThan( EProperty* pProperty )
{
	if( pProperty == NULL )
	{
		return true;
	}

	bool bGreater = false;

	double d1;
	double d2;

	if( GetSortValueDouble(d1) && pProperty->GetSortValueDouble(d2) )
	{
		bGreater = (d1>d2);
	}
	else
	{
		bGreater = GetSortValueString() > pProperty->GetSortValueString();
	}

	return bGreater;
}

EProperty* EProperty::SetComment( const CString& sComment )
{
	m_sComment = sComment;
	return this;
}

CString EProperty::GetComment()
{
	return m_sComment;
}
