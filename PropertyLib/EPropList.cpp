/* Generated by Together */

#include "stdafx.h"
#include "EProperty.h"
#include "EPropertyString.h"
#include "EPropertyDouble.h"
#include "EPropertyFloat.h"
#include "EPropertyCombo.h"
#include "EPropertyFont.h"
#include "EPropertyInt.h"
#include "EPropertyColor.h"
#include "EPropertyCheck.h"
#include "EPropertyFile.h"
#include "EPropertyTextblock.h"
#include "EPropertySeparator.h"
#include "EPropertyDir.h"
#include "IPropertyHost.h"
#include "EPropList.h"


EPropList::ETabGroup::ETabGroup( const CString& sName , int nIcon )
{
	m_sName = sName;
	m_nIcon = nIcon;
}

EPropList::ETabGroup::~ETabGroup()
{
	int n = m_vProperties.size();

	for( int i=0 ; i<n ; i++ )
	{
		EProperty* pProperty = m_vProperties[i];
		delete pProperty;
	}

	m_vProperties.clear();
}

CString* EPropList::ETabGroup::GetName()
{
	return &m_sName;
}

int EPropList::ETabGroup::GetIcon()
{
	return m_nIcon;
}

EProperty* EPropList::ETabGroup::Get(int i)
{
	int size = m_vProperties.size();

	int n = i % size;

	if( n < 0 )
	{
		n += size;
	}

	ASSERT( n >= 0 );
	ASSERT( n < size );

	return m_vProperties[n];
}

void EPropList::ETabGroup::AddProperty(EProperty* pProperty)
{
    m_vProperties.push_back(pProperty);
}

int EPropList::ETabGroup::Size()
{
    return m_vProperties.size();
}

//--------------------------------------------------------------------------//
//
//
//
//--------------------------------------------------------------------------//

EPropList::EPropList()
{
	Clear();
}

EPropList::~EPropList()
{
	Clear();
}

void EPropList::SetActiveTab(int i)
{
	int n = m_vTabGroups.size();
	int q = -1;

	if( n > 0 )	//no tabs..! jost hast no properties...
	{
		q = i % n;

		if( q < 0 )
		{
			q += n;
		}
	}

	m_nCurrentTab = q;
}

int EPropList::GetActiveTab()
{
	return m_nCurrentTab;
}

EPropList::ETabGroup* EPropList::GetTab(int i)
{
	return m_vTabGroups[i];
}

bool EPropList::HasUserTabs()
{
	return m_bHasUserTabs;
}

EProperty* EPropList::AddProperty( EProperty* pProperty )
{
	if( m_vTabGroups.size() == 0 )
	{
		AddTab("Default");
		m_bHasUserTabs = false;
	}

	pProperty->m_nIndent = m_nIndent;
	GetTab(m_nCurrentTab)->AddProperty(pProperty);

	return pProperty;
}

void EPropList::StepIndentIn()
{
	m_nIndent++;
}

void EPropList::StepIndentOut()
{
	m_nIndent--;
}


int EPropList::Size()
{
	int nSize = 0;

	int nNumTabs = m_vTabGroups.size();

	if( nNumTabs > 0 )
	{
		ASSERT( m_nCurrentTab < nNumTabs );
		nSize = GetTab(m_nCurrentTab)->Size();
	}

	return nSize;
}

int EPropList::GetTabCount()
{
	return m_vTabGroups.size();
}

void EPropList::Clear()
{
	int n = m_vTabGroups.size();

	for( int i=0 ; i<n ; i++ )
	{
		ETabGroup* pTabGroup = m_vTabGroups[i];
		delete pTabGroup;
	}

	m_vTabGroups.clear();

	m_nCurrentTab  = -1;
	m_bHasUserTabs = false;

	m_nIndent = 0;

}

EProperty* EPropList::Get(int i)
{
	return GetTab(m_nCurrentTab)->Get(i);
}

EProperty* EPropList::GetProperty( const CString& sName )
{
	EProperty* pProperty = NULL;

	int nNumGroups = m_vTabGroups.size();

	for( int i=0 ; (i<nNumGroups) && (pProperty==NULL) ; i++ )
	{
		ETabGroup* pGroup = m_vTabGroups[i];

		int nNumProperties = pGroup->Size();

		for( int q=0 ; q<nNumProperties ; q++ )
		{
			EProperty* pProp = pGroup->Get(q);

			if( pProp->GetName() == sName )
			{
				pProperty = pProp;
				break;
			}
		}
	}

	return pProperty;
}

//void EPropList:: Set( int i , EProperty* pProperty )
//{
//	int size = m_vec.size();
//
//	int n = i % size;
//
//	if( n < 0 )
//	{
//		n += size;
//	}
//
//	ASSERT( n >= 0 );
//	ASSERT( n < size );
//
//	m_vec[n] = pProperty;
//}

EPropertyString* EPropList::AddPropString( IPropertyHost* pHost , const CString& sName , CString* pStringProperty , bool bEnabled )
{
	EPropertyString* p = new EPropertyString(pHost,sName,pStringProperty,bEnabled);
	AddProperty(p);
	return p;
}

void EPropList::AddPropTextblock( IPropertyHost* pHost , const CString& sName , CString* pText , bool bEnabled )
{
	AddProperty( new EPropertyTextblock(pHost,sName,pText,bEnabled) );
}

EPropertyDouble* EPropList::AddPropDouble( IPropertyHost* pHost , const CString& sName , double* pDouble , const CString& sUnit , double dMinAllowed , double dMaxAllowed , bool bEnabled )
{
	EPropertyDouble* p = new EPropertyDouble(pHost,sName,pDouble,sUnit,dMinAllowed,dMaxAllowed,bEnabled);
	AddProperty(p);
	return p;
}

EPropertyFloat* EPropList::AddPropFloat( IPropertyHost* pHost , const CString& sName , float* pFloat , const CString& sUnit , double dMinAllowed , double dMaxAllowed , bool bEnabled )
{
	EPropertyFloat* p = new EPropertyFloat(pHost,sName,pFloat,sUnit,dMinAllowed,dMaxAllowed,bEnabled);
	AddProperty(p);
	return p;
}

EPropertyCombo* EPropList::AddPropCombo( IPropertyHost* pHost , const CString& sName  , int* pComboIndex )
{
	EPropertyCombo* pPC = new EPropertyCombo( pHost , sName , pComboIndex );
	AddProperty( pPC );
	return pPC;
}

void EPropList::AddPropFont( IPropertyHost* pHost , const CString& sName , CFont* pFont )
{
	AddProperty( new EPropertyFont(pHost,sName,pFont) );
}

EPropertyInt* EPropList::AddPropInt( IPropertyHost* pHost , const CString& sName , void* pProperty , const CString& sUnit , bool bEnabled )
{
	EPropertyInt* p = new EPropertyInt( pHost , sName , pProperty , sUnit , bEnabled );
	AddProperty(p);
	return p;
}

EPropertyColor* EPropList::AddPropColor( IPropertyHost* pHost , const CString& sName , COLORREF* pColor , bool bEnabled )
{
	EPropertyColor* p = new EPropertyColor( pHost , sName , pColor , bEnabled );
	AddProperty(p);
	return p;
}

EPropertyCheck* EPropList::AddPropCheck(  IPropertyHost* pHost , const CString& sName , bool* pBoolean )
{
	EPropertyCheck* p = new EPropertyCheck( pHost , sName , pBoolean );
	AddProperty(p);
	return p;
}

EPropertyFile* EPropList::AddPropFile( IPropertyHost* pHost , const CString& sName , CString* pFilename , const CString& sFilters )
{
	EPropertyFile* pPF = new EPropertyFile( pHost , sName , pFilename , sFilters );
	AddProperty( pPF );
	return pPF;
}

void EPropList::AddPropSeparator( IPropertyHost* pHost , const CString& sName )
{
	AddProperty( new EPropertySeparator( pHost , sName ) );
}

void EPropList::AddPropHost( IPropertyHost* pHost )
{
	pHost->GetProperties(*this);
}

void EPropList::AddTab( const CString& sName , int nIcon )
{
	ETabGroup* pTabGroup = new ETabGroup(sName,nIcon);
	m_vTabGroups.push_back(pTabGroup);
	m_nCurrentTab = m_vTabGroups.size() - 1;
	m_bHasUserTabs = true;
}

void EPropList::AddComment( const CString& sHostComment )
{
	m_sHostComment = sHostComment;
}
void EPropList::AddPropDir(IPropertyHost* pHost , const CString& sName , CString* pDir )
{
	AddProperty( new EPropertyDir(pHost, sName, pDir ));
}
